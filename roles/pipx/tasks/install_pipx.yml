---
## ------------- ##
## Installs pipx ##
## ------------- ##

- assert:
    that: pipx_installation in ['system', 'venv', 'none']

- when: pipx_installation == 'system'
  block:
    - assert:
        that: ansible_facts.system == 'Darwin'

    - name: install pipx (MacOS)
      community.general.homebrew:
        name: pipx
        state: present

- when: pipx_installation == 'venv'
  block:
    - name: install pipx (venv)
      include_role:
        name: pipv
      vars:
        pipv_package: pipx
        pipv_package_version: "{{ pipx_version | default(omit) }}"
        pipv_copies: true
        pipv_executables:
          - pipx
          - register-python-argcomplete

    - name: "add pipx bin path to shell initialization script: {{ pipx_init_file }}"
      ansible.builtin.blockinfile:
        path: "{{ pipx_init_file }}"
        create: true
        insertbefore: ".*pipx\ apps"
        marker: "# --- {mark} pipx exe path ---"
        block: |
          if ! $(echo "$PATH" | tr ":" "\n" | grep -qx "{{ pipv_bin_path }}") ; then
          	export PATH="{{ pipv_bin_path }}:$PATH"
          fi
        state: present
        mode: u=rw,go=r

- name: "add pipx apps to shell initialization script: {{ pipx_init_file }}"
  ansible.builtin.blockinfile:
    path: "{{ pipx_init_file }}"
    create: true
    insertafter: ".*pipx\ exe\ path"
    marker: "# --- {mark} pipx apps ---"
    block: |
      if ! $(echo "$PATH" | tr ":" "\n" | grep -qx "{{ pipx_apps_path }}") ; then
      	export PATH="{{ pipx_apps_path }}:$PATH"
      fi
    state: present
    mode: u=rw,go=r

- name: "add pipx completions to shell initialization script: {{ pipx_init_file }}"
  ansible.builtin.blockinfile:
    path: "{{ pipx_init_file }}"
    create: true
    insertafter: ".*pipx\ apps"
    marker: "# --- {mark} pipx completions ---"
    block: eval "$(register-python-argcomplete pipx)"
    state: present
    mode: u=rw,go=r
