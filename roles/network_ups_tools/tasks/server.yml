---
## ---------------------------------------------------------------------- ##
## This script will setup NUT server for its own physically connected UPS ##
## ---------------------------------------------------------------------- ##

- name: shutdown UPS driver
  ansible.builtin.command: upsdrvctl stop
  changed_when: true
  ignore_errors: true

- name: scan for UPS devices and drivers
  ansible.builtin.shell: nut-scanner -q
  changed_when: false
  register: nut_scan_results

- name: Validate ups_conf override devices
  vars:
    expected_keys: "{{ (_nut_scanner_ups_conf.keys() | list) + ['global'] }}"
  assert:
    that: (_nut_ups_conf_overrides.keys() | difference(expected_keys) | length) == 0
    fail_msg: "Illegal devices: {{ _nut_ups_conf_overrides.keys() | difference(expected_keys) | string }}"

- name: ups.conf
  become: true
  ansible.builtin.template:
    src: ups.conf.j2
    dest: "{{ nut_config_path }}/ups.conf"
    owner: root
    group: nut
    mode: u=rw,g=r,o-rwx

## Need to install ups.conf and reboot, before attempting to restart the nut services.
## Upon reboot, the NUT-installed udev rules will assign correct group ownership to the device
## file handle based upon the manufacturer & model information accessed by the device driver.
## https://askubuntu.com/questions/113994/trouble-starting-network-ups-tools-with-a-eaton-3s-ups

- name: restart UPS driver
  ansible.builtin.command: upsdrvctl start
  changed_when: true

- name: upsd.conf
  ansible.builtin.template:
    src: upsd.conf.j2
    dest: "{{ nut_config_path }}/upsd.conf"
    owner: root
    group: nut
    mode: u=rw,g=r,o-rwx

- name: upsd.users
  ansible.builtin.template:
    src: upsd.users.j2
    dest: "{{ nut_config_path }}/upsd.users"
    owner: root
    group: nut
    mode: u=rw,g=r,o-rwx

- name: restart nut-server
  ansible.builtin.service:
    name: nut-server
    state: restarted
    enabled: true
  register: nut_server_service
  until: nut_server_service.status.ActiveState == "active"
  retries: 15
  delay: 2

- name: find assigned device names
  ansible.builtin.command: upsc -l
  changed_when: false
  register: nut_server_devices
  failed_when: >
    (nut_server_devices.rc != 0)
    or
    (nut_server_devices.stdout_lines | length == 0)
