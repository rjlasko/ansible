---
## ---------------------------------------------------- ##
## Installs pyenv to manage and install Python versions ##
## ---------------------------------------------------- ##

# XXX: great tutorial see https://wilsonmar.github.io/pyenv/

- name: install pyenv
  community.general.homebrew:
    name: pyenv
    state: present

- name: get pyenv root
  ansible.builtin.command: pyenv root
  changed_when: false
  register: pyenv_root

- name: delete pre-existing pyenv config and python installations
  when: python_reset_pyenv
  ansible.builtin.file:
    path: "{{ pyenv_root.stdout }}"
    state: absent

- name: find previously installed Python versions
  ansible.builtin.command: pyenv versions --bare
  changed_when: false
  register: python_versions_installed

- name: install Python versions via pyenv
  loop: "{{ python_pyenv_versions }}"
  loop_control:
    loop_var: python_version
  when: python_version not in python_versions_installed.stdout_lines
  ansible.builtin.shell: "pyenv install {{ python_version }} && pyenv rehash"

- name: set global Python versions
  ansible.builtin.command: "pyenv global {{ python_global_versions }}"
  changed_when: true

- name: "add pyenv shims to shell initialization script: {{ python_pyenv_init_file }}"
  lineinfile:
    path: "{{ python_pyenv_init_file }}"
    create: "{{ python_pyenv_init_file_create }}"
    regexp: '$(pyenv root)/shims'
    line: 'if ! $(echo "$PATH" | tr ":" "\n" | grep -qx "$(pyenv root)/shims") ; then PATH=$(pyenv root)/shims:$PATH ; fi'
    state: present

- name: "add pyenv init to shell initialization script: {{ python_pyenv_init_file }}"
  lineinfile:
    path: "{{ python_pyenv_init_file }}"
    create: "{{ python_pyenv_init_file_create }}"
    regexp: 'pyenv init'
    line: 'eval "$(pyenv init -)"'
    state: present
