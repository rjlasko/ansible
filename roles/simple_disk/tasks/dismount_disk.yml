---
## -------------------------------------------------------------- ##
## Identifies if a device needs to have its partitions dismounted ##
## -------------------------------------------------------------- ##

- set_fact:
    selected_partition: "{{ simple_disk.dev }}-part1"

# Finds all partitions on the given device, as well as the expected partition, if it exists

- name: "find legacy ids for device: {{ simple_disk.dev }}"
  set_fact:
    selected_legacy_devices: "{{ ansible_facts.device_links.ids | dict2items | selectattr('value', 'issuperset', [simple_disk.dev]) | map(attribute='key') | list }}"
    selected_legacy_partitions: "{{ ansible_facts.device_links.ids | dict2items | selectattr('value', 'issuperset', [selected_partition]) | map(attribute='key') | list}}"
  failed_when: >
    ((selected_legacy_devices | length) != 1)
    or
    ((selected_legacy_partitions | length) > 1)

# convert to UUIDs

- name: "get UUIDs for all partitions for device: {{ simple_disk.dev }}"
  set_fact:
    dismounts: []
    selected_device_partition_uuids: "{{ ansible_facts.devices[selected_legacy_devices[0]].partitions | dict2items | map(attribute='value') | map(attribute='uuid') | list }}"

- name: "find UUID for partition: {{ selected_partition }}"
  when: >
    ((selected_legacy_partitions | length) == 1)
    and
    (selected_legacy_partitions[0] in ansible_facts.device_links.uuids)
  set_fact:
    selected_partition_uuids: "{{ ansible_facts.device_links.uuids[selected_legacy_partitions[0]] }}"
    selected_partition_uuid: "{{ ansible_facts.device_links.uuids[selected_legacy_partitions[0]][0] }}"
  failed_when: (selected_partition_uuids | length) > 1

# find any mounts associated with the partitions, by UUID

- name: mounts by UUID
  set_fact:
    by_uuid: "{{ by_uuid | default({}) | combine( {item.uuid: item} ) }}"
  with_items:
    - "{{ ansible_facts.mounts }}"

- name: gather mountpoints to dismount, via device partitions
  loop: "{{ selected_device_partition_uuids }}"
  loop_control:
    loop_var: dev_part_uuid
  when: dev_part_uuid in by_uuid
  set_fact:
    dismounts: "{{ dismounts + [by_uuid[dev_part_uuid].mount] }}"

- name: mounts by mountpoint
  set_fact:
    by_mountpoint: "{{ by_mountpoint | default({}) | combine( {item.mount: item} ) }}"
  with_items:
    - "{{ ansible_facts.mounts }}"

- name: append mountpoints to dismount, via declared mountpoint
  when: simple_disk.mount in by_mountpoint
  set_fact:
    dismounts: "{{ (dismounts + [simple_disk.mount]) | unique}}"

# conditions for dismounting:
# something to dismount, AND any of the following
# 1. rebuilding (partition + format) the given device and targeted mountpoint
# 2. more than one partition
# 3. desired partition has different mountpoint

- name: dismount if the device partitions or their mountpoint's need to change
  when: >
    dismounts | length > 0
    and (
      simple_disk.rebuild | default(false)
      or
      selected_device_partition_uuids | length > 1
      or (
        selected_partition_uuid is defined
        and
        selected_partition_uuid in by_uuid
        and
        by_uuid[selected_partition_uuid].mount != simple_disk.mount
    ))
  block:
    - name: unmount device partition, if mountpoint is changing
      loop: "{{ dismounts }}"
      loop_control:
        loop_var: dismount
      mount:
        path: "{{ dismount }}"
        state: absent

    - name: update ansible_facts for mounts
      setup:
        gather_subset:
          - mounts
