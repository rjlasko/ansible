---
## -------------------------------------------------------- ##
## Attach a new or pre-existing disk to a VM configuration ##
## -------------------------------------------------------- ##

- name: build attach-disk base command
  set_fact:
    virt_attach: "virsh attach-disk {{ libvirt.vm.name | mandatory }} {{ libvirt_disk.host.path }} {{ libvirt_disk.guest.dev | mandatory }}"

- name: add target_bus to base command
  when: libvirt_disk.guest.bus is defined
  set_fact:
    virt_attach: "{{ virt_attach }} --targetbus {{ libvirt_disk.guest.bus }}"

- name: stat the path to determine if it is a device or file, or even exists
  stat:
    path: "{{ libvirt_disk.host.path | mandatory }}"
    follow: true
    get_checksum: false
  register: libvirt_disk_path_stat

# XXX: block device handling is correctly intuited without any extra parameters
- name: handle non-device paths as image file
  when: >
    libvirt_disk.host.path is not match("/dev/")
    and
    not (libvirt_disk_path_stat.stat.isblk | default(false))
  block:
    - name: delete old image
      when: libvirt_disk.host.rebuild | default(false)
      file:
        path: "{{ libvirt_disk.host.path }}"
        state: absent
      register: libvirt_image_path_delete

    - name: build disk image
      when: >
        not libvirt_disk_path_stat.stat.exists
        or
        libvirt_image_path_delete.changed
      include: build_disk_image.yml
      vars:
        libvirt_image: "{{ libvirt_disk.host }}"

    - name: attach as file 'type' (aka 'subdriver')
      set_fact:
        virt_attach: "{{ virt_attach }} --driver qemu --subdriver {{ libvirt_disk.host.path.split('.') | last }}"

- name: add iothread to base command
  when: libvirt_disk.guest.iothread is defined
  set_fact:
    virt_attach: "{{ virt_attach }} --iothread {{ libvirt_disk.guest.iothread }}"

- name: add cache to base comand
  when: libvirt_disk.guest.cache is defined
  set_fact:
    virt_attach: "{{ virt_attach }} --cache {{ libvirt_disk.guest.cache }}"

- name: add io to base command
  when: libvirt_disk.guest.io is defined
  set_fact:
    virt_attach: "{{ virt_attach }} --io {{ libvirt_disk.guest.io }}"

- name: add serial to base command
  when: libvirt_disk.guest.serial is defined
  set_fact:
    virt_attach: "{{ virt_attach }} --serial {{ libvirt_disk.guest.serial }}"

- name: "attach disk to {{ libvirt.vm.name }}"
  command: "{{ virt_attach }} --config"

# XXX: The following can only be done (currently) from within libvirt's XML model

# TODO: physical devices could have 512/4k, should this be sustained?
# TODO: seems like qemu doesn't accept greater than 32K block sizes, where does the 1M that i've been reading about come into play?
# XXX: these all are different things.  The cluster size in an image and block size of a block device are different things
# if it is a block device, then get it with stat




- name: apply the blocksize of the source to the machine description
  when: >
    libvirt_disk.guest.logical_block_size is defined
    and
    libvirt_disk.guest.physical_block_size is defined
  include: alter_domain_xpath.yml
  vars:
    libvirt_xpath:
      # backticks get resolved as single quotes surrounding the nested & resolved variable name
      xpath: "/domain/devices/disk[source/@file='{{ libvirt_disk.host.path }}' or source/@dev='{{ libvirt_disk.host.path }}']"
      add_children:
        - blockio:
            # limited to 32k by QEMU
            logical_block_size: "{{ libvirt_disk.guest.logical_block_size }}"
            physical_block_size: "{{ libvirt_disk.guest.physical_block_size }}"
