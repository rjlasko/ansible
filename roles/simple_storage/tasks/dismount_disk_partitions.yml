---
## ------------------------------------------------------------------------ ##
## Dismounts all paths declared and discovered from devices and partitions ##
## ------------------------------------------------------------------------ ##

- name: create legacy block device id to mountpoint map
  with_items:
    - "{{ ansible_facts.mounts }}"
  ansible.builtin.set_fact:
    legacy_id_to_mount: "{{ legacy_id_to_mount | default({}) | combine({ item.device: item.mount }) }}"

## rebuild device ##
- name: collect declared paths to dismount and disk ids to rebuild
  set_fact:
    dismount_paths: "{{
      (dismount_paths | default([]))
      + (
          simple_storage
          | selectattr('rebuild', 'defined') | selectattr('rebuild', 'equalto', True)
          | map(attribute='partitions') | flatten
          | selectattr('mount', 'defined') | map(attribute='mount') | flatten)
    }}"
    rebuild_device_ids: "{{
      simple_storage
      | selectattr('rebuild', 'defined') | selectattr('rebuild', 'equalto', True)
      | map(attribute='disk_id') }}"

- name: discover legacy disk partition ids for each rebuild disk
  loop: "{{ ansible_facts.device_links.ids | dict2items }}"
  loop_control:
    loop_var: device_link_id
  when: device_link_id.value | intersect(rebuild_device_ids) | length > 0
  ansible.builtin.set_fact:
    rebuild_partition_legacy_ids: "{{
      (rebuild_partition_legacy_ids | default([]))
      + (ansible_facts.devices[device_link_id.key].partitions | dict2items | map(attribute='key'))
    }}"

- name: append dismount paths converted from legacy disk partition ids
  loop: "{{ rebuild_partition_legacy_ids }}"
  loop_control:
    loop_var: lid
  set_fact:
    dismount_paths: "{{ dismount_paths + [legacy_id_to_mount['/dev/' + lid]] }}"

## format partition ##
- name: collect partition targets to dismount not tied to disks requesting full rebuild
  set_fact:
    format_partition_targets: |
      {% set tgt = [] %}
      {% for simple_disk in simple_storage %}
      {% for partition in simple_disk.partitions %}
      {% if (simple_disk.rebuild is not defined or simple_disk.rebuild == False)
            and (partition.format is defined and partition.format == True) %}
      {% set _ = tgt.append(
        {
          'part_id': simple_disk.disk_id + '-part' + (loop.index | string),
          'mount': partition.mount if partition.mount is defined else None
        }) %}
      {% endif %}
      {% endfor %}
      {% endfor %}
      {{ tgt }}

- name: append all declared format partition dismount paths
  set_fact:
    dismount_paths: "{{ dismount_paths + (format_partition_targets | map(attribute='mount')) }}"

- name: append dismount paths converted from each legacy disk partition id
  loop: "{{ ansible_facts.device_links.ids | dict2items }}"
  loop_control:
    loop_var: device_link_id
  when: device_link_id.value | intersect(format_partition_targets | map(attribute='part_id')) | length > 0
  set_fact:
    dismount_paths: "{{ dismount_paths + [legacy_id_to_mount['/dev/' + device_link_id.key]] }}"

- name: filter out any paths that have nothing mounted to them
  set_fact:
    dismount_paths: "{{ dismount_paths | intersect(ansible_facts.mounts | map(attribute='mount')) | sort }}"

- name: dismount any mountpoint tied to a partition being rebuilt or formatted
  loop: "{{ dismount_paths }}"
  loop_control:
    loop_var: dismount_path
  ansible.posix.mount:
    path: "{{ dismount_path }}"
    state: absent
