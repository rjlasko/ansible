---
## ------------------- ##
## Build or Restore VM ##
## ------------------- ##

# XXX: intuitive behavior follows precedence, unless declared:
# 1. (skip) use existing VM unaltered
# 2. (fast) restore from backup
# 3. (slow) build from ISO, if given

- name: check invalid create mode
  when: libvirt_vm.create_mode | mandatory not in ['skip', 'restore', 'build']
  fail:
    msg: "invalid libvirt_vm.create_mode: {{ libvirt_vm.create_mode }}"

- name: handle create VM
  when: libvirt_vm.create_mode != 'skip'
  block:
    - name: install packages for Ansible libvirt support
      become: true
      package:
        name: python-libvirt
        state: present

    - name: Handle active like-named VMs
      block:
      - name: list VMs
        virt:
          command: list_vms
        register: libvirt_existing_vms
      - name: shutdown & undefine pre-existing VM
        when: >
          libvirt_existing_vms.list_vms | length > 0
          and
          libvirt_vm.name in libvirt_existing_vms.list_vms
        block:
          - name: "shutdown VM: {{ libvirt_vm.name }}"
            virt:
              command: shutdown
              name: "{{ libvirt_vm.name }}"
          - name: "waiting for shutdown: {{ libvirt_vm.name }}"
            virt:
              command: status
              name: "{{ libvirt_vm.name }}"
            register: libvirt_vm_status
            until: libvirt_vm_status.status == 'shutdown'
            # check for desired status for 5 minutes
            delay: 3
            retries: 100
          - name: "undefine VM: {{ libvirt_vm.name }}"
            virt:
              command: undefine
              name: "{{ libvirt_vm.name }}"

    - name: Handle like-named VM volume
      block:
        - name: list volumes
          shell: virsh vol-list --pool default | tail -n+3 | grep {{ libvirt_vm.name }} | awk '{print $1}'
          register: libvirt_existing_vols
        - name: Delete old VM volumes
          when: libvirt_existing_vols.stdout | length > 0
          loop: "{{ libvirt_existing_vols.stdout_lines }}"
          loop_control:
            loop_var: libvirt_del_vol
          shell: "virsh vol-delete --pool default {{ libvirt_del_vol }}"

    - name: handle VM 'build' (slow)
      when: >
        libvirt_vm.create_mode == 'build'
        and
        libvirt_vm.iso | mandatory is defined
      include: build_guest.yml

    - name: handle VM 'restore' (fast)
      when: >
        libvirt_vm.create_mode == 'restore'
        and
        libvirt_vm.backup_dir | mandatory is defined
      include: restore_guest.yml

    - name: "wait for {{ libvirt_vm.name }} to come back up before proceeding"
      # XXX: this is because windows hosts are a little bit of a pain to work with
      when: libvirt_vm.manual_install | default(false) == false
      wait_for:
        host: "{{ libvirt_vm.dns_address | mandatory }}"
        port: 22
