---
argument_specs:
  # tasks/main.yml entry point
  main:
    short_description: The main entry point for the `network_ups_tools` role.
    options:
      nut:
        description: specification for a host's NUT configuration
        type: dict
        options:
          mode:
            description: Mode that NUT is running in.
            choices:
              - standalone # gets signaling directly from attached UPS
              - netclient # gets NUT signaling from network
            required: true
          email:
            description: Target for email notifications
            required: true
          user:
            description: Name of the UPS monitor user.
            required: true
          upsname:
            description: >
              Name of the UPS used by a client.
              This must match the value of the 'product' entry returned by `nut-scanner`.
              This value is required when NUT is in `netclient` mode.
          server:
            description: >
              Name of the UPS NUT server.
              This value is required when NUT is in `netclient` mode.

          ups_conf:
            description: >
              The set of overrides to the default configuration for UPS devices automatically
              detected by this role, which is derived from returns from the `nut-scanner` utility.

              The set of configurations for each underlying section can be found within the
              following URL: https://networkupstools.org/docs/man/ups.conf.html
            type: dict
            default: {}
            options:
              global:
                description: Global configurations for all devices
                type: dict
                default: {}
                options:
                  chroot:
                    description: The driver will chroot(2) to this directory during initialization.
                  driverpath:
                    description: Path name of the directory in which the UPS driver executables reside.
                  maxstartdelay:
                    description: >
                      This value controls how long upsdrvctl will wait for the driver to finish starting.
                      This keeps your system from getting stuck due to a broken driver or UPS.
                  maxretry:
                    description: >
                      Specify the number of attempts to start the driver(s), in case of failure, before giving up.
                      A delay of retrydelay is inserted between each attempt.
                  nowait:
                    description: Specify to upsdrvctl to not wait at all for the driver(s) to execute the request command.
                  retrydelay:
                    description: Specify the delay between each restart attempt of the driver(s), as specified by maxretry.
                  pollinterval:
                    description: >
                      The status of the UPS will be refreshed after a maximum delay which is controlled by this setting.
                      This is normally 2 seconds.
                  synchronous:
                    description: >
                      The drivers work by default in asynchronous mode initially but can fall back to synchronous mode
                      if writes to server socket failed (i.e synchronous=auto). This means that all data are pushed by
                      the driver on the communication socket to upsd (Unix socket on Unix, Named pipe on Windows)
                      without waiting for these data to be actually consumed. With some HW, such as ePDUs, that can
                      produce a lot of data, asynchronous mode may cause some congestion, resulting in the socket to be
                      full, and the driver to appear as not connected. In such case, the driver will provide the
                      following debug message: "write XX bytes to socket Y failed"

                      By enabling the synchronous flag (value = yes), the driver will wait for data to be consumed by
                      upsd, prior to publishing more. This can be enabled either globally or per driver.

                      The default of auto acts like no (i.e. asynchronous mode) for backward compatibility of the driver
                      behavior, until communications fail with a "Resource temporarily unavailable" condition, which
                      happens when the driver has many data points to send in a burst, and the server can not handle
                      that quickly enough so the buffer fills up.
                  user:
                    description: Overrides the compiled-in default unprivileged username for all NUT device drivers.
                  group:
                    description: >
                      Overrides the compiled-in (and/or global-section) default unprivileged group name for all NUT
                      device drivers, used for the socket file access.
                  debug_min:
                    description: >
                      Specify a minimum debug level for all driver daemons, e.g. for troubleshooting a deployment,
                      without impacting foreground or background running mode directly.
              devices:
                description: Configurations for all devices
                type: list
                default: []
                elements: dict
                options:
                  name:
                    description: >
                      The name of the UPS device for the given configuration.  This name is formatted as
                      `<product>_<serial>`, if both of those fields are present in the devices returned by the
                      `nut-scanner` utility.  If either are not present, then the name of the device shall be exactly as
                      returned by the `nut-scanner` utility, typically following the `nutdev<N>` format, where `<N>` is
                      an integer.
                    required: true
                  driver:
                    description: >
                      This specifies which program will be monitoring this UPS. You need to specify the one that is
                      compatible with your hardware. See nutupsdrv(8) for more information on drivers in general and
                      pointers to the man pages of specific drivers.
                  port:
                    description: >
                      This is the serial port where the UPS is connected. On a Linux system, the first serial port
                      usually is /dev/ttyS0. On FreeBSD and similar systems, it probably will be /dev/cuaa0. On Windows,
                      the first serial port will be "\\\\.\\COM1" (note the escaped slashes).
                  user:
                    description: >
                      Overrides the compiled-in (and/or global-section) default unprivileged username for a particular
                      NUT device driver. See the discussion of the -u option in nutupsdrv(8) for details. This may be
                      specifically useful for ensuring access to dynamic device filesystem nodes, such as USB (or
                      serial-over-USB) hot-plug support, or with device filesystems re-generated by an OS for every
                      reboot.
                  group:
                    description: >
                      Overrides the compiled-in (and/or global-section) default unprivileged group name for a particular
                      NUT device driver, used for the socket file access. See the discussion of the -g option in
                      nutupsdrv(8) for details. This may be specifically useful for ensuring access to dynamic device
                      filesystem nodes, such as USB (or serial-over-USB) hot-plug support, or with device filesystems
                      re-generated by an OS for every reboot.
                  sdorder:
                    description: >
                      When you have multiple UPSes on your system, you usually need to turn them off in a certain order.
                      upsdrvctl shuts down all the 0s, then the 1s, 2s, and so on. To exclude a UPS from the shutdown
                      sequence, set this to -1.

                      The default value for this parameter is 0.
                  allow_killpower:
                    description: >
                      This allows you to request driver.killpower instant command, to immediately call the
                      driver-specific default implementation of upsdrv_shutdown() method, for same effect as when a NUT
                      driver is started with -k command-line flag. This option can be toggled with upsrw(8) as
                      driver.flag.allow_killpower during run-time.
                  desc:
                    description: >
                      This allows you to set a brief description that upsd will provide to clients that ask for a list
                      of connected equipment.
                  nolock:
                    description: >
                      When you specify this, the driver skips the port locking routines every time it starts. This may
                      allow other processes to seize the port if you start more than one accidentally.

                      You should only use this if your system wonâ€™t work without it.
                  maxstartdelay:
                    description: >
                      This value controls how long upsdrvctl will wait for the driver to finish starting.
                      This keeps your system from getting stuck due to a broken driver or UPS.
                  synchronous:
                    description: Same as the global directive of the same name, but this is for a specific device.
                  pollinterval:
                    description: >
                      The status of the UPS will be refreshed after a maximum delay which is controlled by this setting.
                      This is normally 2 seconds.

                      (This option is not stated in the NUT documentation, but appears to work for Cyperpower devices)

          upsd_conf:
            description: >
              Configuration for Network UPS Tools upsd
              see: https://networkupstools.org/docs/man/upsd.conf.html
            type: dict
            default: {}
            options:
              MAXAGE:
                description: >
                  upsd usually allows a driver to stop responding for up to 15 seconds before declaring the data
                  "stale". If your driver takes a very long time to process updates but is otherwise operational, you
                  can use MAXAGE to make upsd wait longer.
              TRACKINGDELAY:
                description: >
                  When instant commands and variables setting status tracking is enabled, status execution information
                  are kept during this amount of time, and then cleaned up.
              ALLOW_NO_DEVICE:
                description: >
                  Normally upsd requires that at least one device section is defined in ups.conf when the daemon starts,
                  to serve its data. For automatically managed services it may be preferred to have upsd always running,
                  and reload the configuration when power devices become defined.

                  Boolean values true, yes, on and 1 mean that the server would not refuse to start with zero device
                  sections found in ups.conf.

                  Boolean values false, no, off and 0 mean that the server should refuse to start if zero device
                  sections were found in ups.conf. This is the default, unless the calling environment sets a same-named
                  variable to enforce a value for the current run. One way this can happen is somebody un-commenting it
                  in the nut.conf file used by init-scripts and service unit method scripts.
              STATEPATH:
                description: >
                  Tell upsd to look for the driver state sockets in path rather than the default that was compiled into
                  the program.
              LISTEN:
                description: >
                  Bind a listening port to the interface specified by its Internet address or name. This may be useful
                  on hosts with multiple interfaces. You should not rely exclusively on this for security, as it can be
                  subverted on many systems.

                  Optionally listen on TCP port port instead of the default value which was compiled into the code. This
                  overrides any value you may have set with configure --with-port. If you donâ€™t change it with configure
                  or this value, upsd will listen on port 3493 for this interface.

                  Multiple LISTEN addresses may be specified. The default is to bind to 127.0.0.1 if no LISTEN addresses
                  are specified (and ::1 if IPv6 support is compiled in).

                  To listen on all available interfaces, you may also use 0.0.0.0 for IPv4 and and :: for IPv6.

                  LISTEN 127.0.0.1
                  LISTEN 192.168.50.1
                  LISTEN myhostname.mydomain
                  LISTEN ::1
                  LISTEN 2001:0db8:1234:08d3:1319:8a2e:0370:7344

                  This parameter will only be read at startup. Youâ€™ll need to restart (rather than reload) upsd to apply
                  any changes made here.
                type: list
                elements: str
              MAXCONN:
                description: >
                  This defaults to maximum number allowed on your system. Each UPS, each LISTEN address and each client
                  count as one connection. If the server runs out of connections, it will no longer accept new incoming
                  client connections.
              CERTFILE:
                description: >
                  When compiled with SSL support with OpenSSL backend, you can enter the certificate file here. The
                  certificates must be in PEM format and must be sorted starting with the subjectâ€™s certificate (server
                  certificate), followed by intermediate CA certificates (if applicable_ and the highest level (root)
                  CA. It should end with the server key. See docs/security.txt or the Security chapter of NUT user
                  manual for more information on the SSL support in NUT.
              CERTPATH:
                description: >
                  When compiled with SSL support with NSS backend, you can enter the certificate path here. Certificates
                  are stored in a dedicated database (data split in 3 files). Specify the path of the database
                  directory.
              CERTIDENT:
                description: >
                  When compiled with SSL support with NSS backend, you can specify the certificate name to retrieve from
                  database to authenticate itself and the password required to access certificate related private key.
              CERTREQUEST:
                description: >
                  When compiled with SSL support with NSS backend and client certificate validation (disabled by
                  default, see docs/security.txt), you can specify if upsd requests or requires clientâ€™s' certificates.
                  Possible values are :
                    - 0 to not request to clients to provide any certificate
                    - 1 to require to all clients a certificate
                    - 2 to require to all clients a valid certificate
              DISABLE_WEAK_SSL:
                description: >
                  Tell upsd to disable older/weak SSL/TLS protocols and ciphers. With relatively recent versions of
                  OpenSSL or NSS it will be restricted to TLSv1.2 or better. Unless you have really ancient clients, you
                  probably want to enable this. Currently disabled by default to ensure compatibility with existing
                  setups.


          upsmon_conf:
            description: >
              Configuration for Network UPS Tools upsmon
              see: https://networkupstools.org/docs/man/upsmon.conf.html
            type: dict
            default: {}
            options:
              DEADTIME:
                description: >
                  upsmon allows a UPS to go missing for this many seconds before declaring it "dead". The default is
                  15 seconds.
                type: int
              FINALDELAY:
                description: >
                  When running in primary mode, upsmon waits this long after sending the NOTIFY_SHUTDOWN to warn the
                  users. After the timer elapses, it then runs your SHUTDOWNCMD. By default this is set to 5 seconds.
                type: int
              HOSTSYNC:
                description: >
                  upsmon will wait up to this many seconds in primary mode for the secondaries to disconnect during a
                  shutdown situation. By default, this is 15 seconds.
                type: int
              MINSUPPLIES:
                description: >
                  Set the number of power supplies that must be receiving power to keep this system running. Normal
                  computers have just one power supply, so the default value of 1 is acceptable.
                type: int
              MONITOR:
                description: Each UPS that you need to be monitor should have a MONITOR line
                type: list
              NOCOMMWARNTIME:
                description: >
                  upsmon will trigger a NOTIFY_NOCOMM after this many seconds if it canâ€™t reach any of the UPS entries
                  in this configuration file. It keeps warning you until the situation is fixed. By default this is 300
                  seconds.
                type: int
              POLLFAIL_LOG_THROTTLE_MAX:
                description: >
                  upsmon normally reports polling failures for each device that are in place for each POLLFREQ loop
                  (e.g. "Data stale" or "Driver not connected") to system log as configured. If your devices are
                  expected to be AWOL for an extended timeframe, you can use this throttle to reduce the stress on
                  syslog traffic and storage, by posting these messages only once in every several loop cycles, and when
                  the error condition has changed or cleared.

                  A negative value means standard behavior, and a zero value means to never repeat the message (log only
                  on start and end/change of the failure state).
                type: int
              NOTIFYCMD:
                description: upsmon calls this to send messages when things happen.
              NOTIFYMSG:
                description: upsmon comes with a set of stock messages for various events. You can change them if you
                  like.
                type: list
              NOTIFYFLAG:
                description: >
                  By default, upsmon sends walls global messages to all logged in users) via /bin/wall and writes to the
                  syslog when things happen. Except for Windows where upsmon only writes to the syslog by default. You
                  can change this.
                type: list
              POLLFREQ:
                description: >
                  Normally upsmon polls the upsd(8) server every 5 seconds. If this is flooding your network with
                  activity, you can make it higher.
                type: int
              POLLFREQALERT:
                description: >
                  This is the interval that upsmon waits between polls if any of its UPSes are on battery. You can use
                  this along with POLLFREQ above to slow down polls during normal behavior, but get quicker updates when
                  something bad happens.

                  This should always be equal to or lower than the POLLFREQ value. By default it is also set 5 seconds.
                type: int
              POWERDOWNFLAG:
                description: >
                  upsmon creates this file when running in primary mode when the UPS needs to be powered off. You should
                  check for this file in your shutdown scripts and call upsdrvctl shutdown if it exists.
              RBWARNTIME:
                description: >
                  When a UPS says that it needs to have its battery replaced, upsmon will generate a NOTIFY_REPLBATT
                  event. By default, this happens every 43200 seconds (12 hours).
              RUN_AS_USER:
                description: >
                  upsmon normally runs the bulk of the monitoring duties under another user ID after dropping root
                  privileges. On most systems this means it runs as "nobody", since thatâ€™s the default from compile-time.

                  The catch is that "nobody" canâ€™t read your upsmon.conf, since by default it is installed so that only
                  root can open it. This means you wonâ€™t be able to reload the configuration file, since it will be
                  unavailable.

                  The solution is to create a new user just for upsmon, then make it run as that user. I suggest
                  "nutmon", but you can use anything that isnâ€™t already taken on your system. Just create a regular user
                  with no special privileges and an impossible password.

                  Then, tell upsmon to run as that user, and make upsmon.conf readable by it. Your reloads will work,
                  and your config file will stay secure.

                  This file should not be writable by the upsmon user, as it would be possible to exploit a hole, change
                  the SHUTDOWNCMD to something malicious, then wait for upsmon to be restarted.
              SHUTDOWNCMD:
                description: >
                  upsmon runs this command when the system needs to be brought down. If it is a secondary, it will do
                  that immediately whenever the current overall power value drops below the MINSUPPLIES value above.
              CERTPATH:
                description: When compiled with SSL support, you can enter the certificate path here.
              CERTIDENT:
                description: >
                  When compiled with SSL support with NSS, you can specify the certificate name to retrieve from
                  database to authenticate itself and the password required to access certificate related private key.
              CERTHOST:
                description: >
                  When compiled with SSL support with NSS, you can specify security directive for each server you can
                  contact.
              CERTVERIFY:
                description: When compiled with SSL support, make upsmon verify all connections with certificates.
                type: int
              FORCESSL:
                description: When compiled with SSL, specify that a secured connection must be used to communicate with upsd.
                type: int
