---
## ------------- ##
## CPU isolation ##
## ------------- ##

- become: true
  block:
    - when: libvirt.isolate is not defined or (libvirt.isolate | length) == 0
      ansible.builtin.file:
        path: "{{ qemu_isolated_guests_path }}"
        state: absent

    - when: libvirt.isolate is defined and (libvirt.isolate | length) > 0
      block:
        - name: install python3 pip
          ansible.builtin.package:
            name: python3-pip

        - name: install vfio-isolate library
          ansible.builtin.pip:
            name: vfio-isolate

        - ansible.builtin.command: cat /proc/cpuinfo
          register: proc_cpuinfo

        - name: apply vfio-isolate from template
          ansible.builtin.template:
            src: isolate.sh.j2
            dest: "{{ qemu_isolate_hook_path }}"
            mode: ug=rx,o=r
          vars:
            libvirt_isolate:
              vm_cpus: "{{ libvirt.isolate.cpuset | asNative(proc_cpuinfo.stdout_lines) }}"
              host_cpus: "{{ range(0, ansible_facts.processor_vcpus) | difference(libvirt.isolate.cpuset) | asNative(proc_cpuinfo.stdout_lines) }}"
              max_cpu_id: "{{ ansible_facts.processor_vcpus - 1 }}"
              isolated_guests_filepath: "{{ qemu_isolated_guests_path }}"

        - name: create file with VMs to isolate from host
          ansible.builtin.copy:
            dest: "{{ qemu_isolated_guests_path }}"
            content: "{{ libvirt.isolate.names | sort | unique | join('\n') }}\n"
            mode: a=r

    - name: restart libvirtd
      ansible.builtin.service:
        name: libvirtd
        state: restarted
        enabled: true
