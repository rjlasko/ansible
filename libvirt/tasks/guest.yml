---
## ------------------- ##
## Build or Restore VM ##
## ------------------- ##

# XXX: intuitive behavior follows precedence, unless declared:
# 1. (skip) use existing VM unaltered
# 2. (restore) restore from backup
# 3. (build) build from ISO, if given

- name: check invalid create mode
  when: libvirt_vm.create_mode | mandatory not in ['skip', 'restore', 'build']
  fail:
    msg: "invalid libvirt_vm.create_mode: {{ libvirt_vm.create_mode }}"

- name: handle create VM
  when: libvirt_vm.create_mode != 'skip'
  block:
    - name: install packages for Ansible libvirt support
      become: true
      package:
        name: python-libvirt
        state: present

    - name: clear pre-existing VM
      include: clear_guest.yml

    - name: handle VM 'build' (slow)
      when: >
        libvirt_vm.create_mode == 'build'
        and
        libvirt_vm.iso | mandatory is defined
      include: build_guest.yml

    - name: backup newly built guest VM
      when: >
        libvirt_vm.create_mode == 'build'
        and
        libvirt_vm.backup_dir is defined
      include: backup_guest.yml

    - name: handle VM 'restore' (fast)
      when: >
        libvirt_vm.create_mode == 'restore'
        and
        libvirt_vm.backup_dir | mandatory is defined
      include: restore_guest.yml

    - name: "wait for {{ libvirt_vm.name }} to come back up before proceeding"
      # XXX: this is because windows hosts are a little bit of a pain to work with
      when: libvirt_vm.manual_install | default(false) == false
      wait_for:
        host: "{{ libvirt_vm.dns_address | mandatory }}"
        port: 22
