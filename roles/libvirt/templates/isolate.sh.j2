#!/usr/bin/env bash
# {{ ansible_managed }}

set -euo pipefail
set -x

# Q: How to enable or disable isolation such that VMs that need it
# aren't negatively impacted by VMs that do not
# A: Engage/sustain isolation while any host exists that needs it
#    ----> isolation when first isolated VM started
#    ----> de-isolation only when shutdown of last isolated VM

#### This script is adapted from the README in vfio-isolate
# see: https://pypi.org/project/vfio-isolate/
## XXX: another interesting QEMU hook project is VFIO-Tools
# see: https://github.com/PassthroughPOST/VFIO-Tools
# see: https://passthroughpo.st/simple-per-vm-libvirt-hooks-with-the-vfio-tools-hook-helper/

HCPUS={{ libvirt_isolate.host_cpus | sort | unique | join(',') }}
MCPUS={{ libvirt_isolate.vm_cpus | sort | unique | join(',') }}

ISOLATED_GUESTS_FILE={{ libvirt_isolate.isolated_guests_filepath }}
ACTIVE_GUESTS_FILE="/var/run/libvirt/qemu/active_guests.txt"
UNDOFILE="/var/run/libvirt/qemu/vfio-isolate-undo.bin"

GUEST_NAME="${1:?Missing 1st argument, GUEST_NAME}"
HOOK_NAME="${2:?Missing 2nd argument, HOOK_NAME}"


function hasActiveIsolation() {
	if [ -e "${UNDOFILE}" ] ; then
		return 0
	fi
	return 1
}

function disable_isolation () {
	vfio-isolate restore "${UNDOFILE}"
	rm "${UNDOFILE}"

	#taskset -pc 0-31 2  # kthreadd reset
	taskset -pc 0-{{ libvirt_isolate.max_cpu_id }} 2  # kthreadd reset
}

function enable_isolation () {
	vfio-isolate \
		-u "${UNDOFILE}" \
		drop-caches \
		cpuset-modify --cpus C${HCPUS} /system.slice \
		cpuset-modify --cpus C${HCPUS} /user.slice \
		compact-memory \
		irq-affinity mask C${MCPUS}

		# cpu-governor performance C${MCPUS} \

	taskset -pc ${HCPUS} 2  # kthreadd only on host cores
}

function hasActiveIsolatedGuest() {
	local ACTIVE_GUESTS=($(grep -v "${GUEST_NAME}" "${ACTIVE_GUESTS_FILE}" | sort | uniq | xargs))
	for i in "${ACTIVE_GUESTS[@]}" ; do
		if grep $i ${ISOLATED_GUESTS_FILE} 1>/dev/null 2>/dev/null ; then
			return 0
		fi
	done
	return 1
}

function isIsolatedGuest() {
	if grep ${GUEST_NAME} ${ISOLATED_GUESTS_FILE} 1>/dev/null 2>/dev/null ; then
		return 0
	fi
	return 1
}

# XXX: flock ensures atomic edits to file
function indicatedGuestActivated() {
	flock "${ACTIVE_GUESTS_FILE}" -c "grep ${GUEST_NAME} ${ACTIVE_GUESTS_FILE} || echo ${GUEST_NAME} >> ${ACTIVE_GUESTS_FILE}"
}

function indicatedGuestDeactivated() {
	flock "${ACTIVE_GUESTS_FILE}" -c "sed -i '/${GUEST_NAME}/d' ${ACTIVE_GUESTS_FILE}"
}

# Make sure that this file is present, if not previously created
# it should be erased on reboot
touch "${ACTIVE_GUESTS_FILE}"

case "${HOOK_NAME}" in
"prepare")
	if isIsolatedGuest && ( ! ( hasActiveIsolation || hasActiveIsolatedGuest ) ) ; then
		enable_isolation
	fi
	;;
"started")
	indicatedGuestActivated
	;;
"release")
	indicatedGuestDeactivated
	if hasActiveIsolation && ( ! hasActiveIsolatedGuest ) ; then
		disable_isolation
	fi
	;;
esac
