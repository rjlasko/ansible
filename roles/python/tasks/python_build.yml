---
## -------------------------------------------------- ##
## Builds & installs python versions for pyenv to use ##
## -------------------------------------------------- ##

- name: find previously installed Python versions
  environment:
    PATH: "{{ pyenv_bin }}:{{ ansible_env.PATH }}"
  ansible.builtin.command: pyenv versions --bare
  changed_when: false
  register: python_versions_installed

- when: pyenv_install_build_dependencies
  block:
    - name: "install python build dependencies ({{ ansible_facts.os_family }} Linux)"
      become: true
      when: ansible_facts.system == 'Linux'
      package:
        name: "{{ python_build_packages[ansible_facts.os_family] }}"
        state: present

    - name: "install python build dependencies (MacOS)"
      when: ansible_facts.system == 'Darwin'
      community.general.homebrew:
        name: "{{ python_build_packages[ansible_facts.os_family] }}"
        state: present

- name: install Python versions via pyenv
  environment:
    PATH: "{{ pyenv_bin }}:{{ ansible_env.PATH }}"
  loop: "{{ python_versions }}"
  loop_control:
    loop_var: python_version
  when: python_version not in python_versions_installed.stdout_lines
  ansible.builtin.shell: "pyenv install {{ python_version }} && pyenv rehash"

- name: "add pyenv shims & init to shell initialization script: {{ pyenv_init_file }}"
  ansible.builtin.blockinfile:
    path: "{{ python_init_file }}"
    create: true
    insertafter: ".*pyenv\ completions"
    marker: "# --- {mark} python path ---"
    block: |
      if ! $(echo "$PATH" | tr ":" "\n" | grep -qx "{{ pyenv_shims }}") ; then
        export PATH="{{ pyenv_shims }}:$PATH"
      fi
    state: present
    mode: u=rw,g=r,o-rwx
