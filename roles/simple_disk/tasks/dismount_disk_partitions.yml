---
## -------------------------------------------------------------- ##
## Identifies if a device needs to have its partitions dismounted ##
## -------------------------------------------------------------- ##


- name: identify all mounts by UUID
  set_fact:
    mounts_by_uuid: "{{ mounts_by_uuid | default({}) | combine({ item.uuid: item }) }}"
  with_items:
    - "{{ ansible_facts.mounts }}"

- name: "find legacy device name for device: {{ simple_disk.dev }}"
  set_fact:
    selected_legacy_devices: "{{ ansible_facts.device_links.ids | dict2items | selectattr('value', 'issuperset', [simple_disk.dev]) | map(attribute='key') }}"
  failed_when: (selected_legacy_devices | length) != 1


# if rebuild, then all partitions on the parent device get dismounted, no matter what they are
- name: device rebuild -> get all partitions and mountpoints to format
  when: simple_disk.rebuild | default(false)
  set_fact:
    selected_partition_uuids: "{{ ansible_facts.devices[selected_legacy_devices[0]].partitions | dict2items | map(attribute='value') | map(attribute='uuid') }}"
    dismount_paths: "{{ simple_disk.partitions | map(attribute='mount') }}"


# if not rebuild, gather all partitions that are true to format
#           -> dismount by uuid.mount
- name: non-device-rebuild -> get partitions to format, by UUID
  when: >
    not (simple_disk.rebuild | default(false))
    and
    (simple_disk.partitions | selectattr('format', 'defined') | map(attribute='format') is any)
  block:
    - name: build partition ID to UUID map
      set_fact:
        partition_id_uuid_map: "{{ partition_id_uuid_map | default({}) | combine({ item.value.links.ids[0]: item.value.uuid }) }}"
      with_items:
        - "{{ ansible_facts.devices | dict2items | map(attribute='value') | map(attribute='partitions') | combine | dict2items }}"

    - name: get partitions UUIDs and mountpoints to format
      loop: "{{ simple_disk.partitions }}"
      loop_control:
        loop_var: simple_disk_partition
        index_var: simple_disk_partition_ix
      when: simple_disk_partition.format | default(false)
      set_fact:
        dismount_paths: "{{ dismount_paths | default([]) + [simple_disk_partition.mount] }}"
        selected_partition_uuids: "{{ selected_partition_uuids | default([]) + [partition_id_uuid_map[selected_partition_id]] }}"
      vars:
        selected_partition_id: "{{ simple_disk.dev }}-part{{ simple_disk_partition_ix + 1 }}"

- name: gather mountpoints to dismount, via device partitions
  loop: "{{ selected_partition_uuids }}"
  loop_control:
    loop_var: selected_partition_uuid
  when: selected_partition_uuid in mounts_by_uuid
  set_fact:
    dismount_paths: "{{ dismount_paths | default([]) + [ mounts_by_uuid[selected_partition_uuid].mount ] }}"

- name: dismount partitions being rebuilt or formatted
  loop: "{{ dismount_paths }}"
  loop_control:
    loop_var: dismount_path
  mount:
    path: "{{ dismount_path }}"
    state: absent
